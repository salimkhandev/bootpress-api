import type * as client from '@botpress/client';
import type { BotSpecificClient } from '../../bot';
import type * as typeUtils from '../../utils/type-utils';
import type { BaseBot } from '../common';
import * as botServerTypes from '../server/types';
import type { WorkflowProxy, WorkflowWithUtilities } from './types';
export declare const proxyWorkflows: <TBot extends BaseBot>(client: BotSpecificClient<TBot> | client.Client) => WorkflowProxy<TBot>;
export declare const wrapWorkflowInstance: <TBot extends BaseBot, TWorkflowName extends typeUtils.StringKeys<TBot["workflows"]>>(props: {
    client: BotSpecificClient<TBot> | client.Client;
    workflow: client.Workflow;
    event?: botServerTypes.WorkflowUpdateEvent;
    onWorkflowUpdate?: (newState: client.Workflow) => Promise<void> | void;
}) => WorkflowWithUtilities<TBot, TWorkflowName>;
