import { ActionDefinition, ChannelDefinition, EntityDefinition, EventDefinition } from '../integration/definition';
import { ZuiObjectSchema, GenericZuiSchema, ZodRef } from '../zui';
type BaseEvents = Record<string, ZuiObjectSchema>;
type BaseActions = Record<string, ZuiObjectSchema>;
type BaseMessages = Record<string, ZuiObjectSchema>;
type BaseChannels = Record<string, BaseMessages>;
type BaseEntities = Record<string, ZuiObjectSchema>;
type EntityReferences<TEntities extends BaseEntities> = {
    [K in keyof TEntities]: ZodRef;
};
type GenericEventDefinition<TEntities extends BaseEntities, TEvent extends BaseEvents[string] = BaseEvents[string]> = {
    schema: GenericZuiSchema<EntityReferences<TEntities>, TEvent>;
    attributes?: Record<string, string>;
};
type GenericChannelDefinition<TEntities extends BaseEntities, TChannel extends BaseChannels[string] = BaseChannels[string]> = {
    messages: {
        [K in keyof TChannel]: {
            schema: GenericZuiSchema<EntityReferences<TEntities>, TChannel[K]>;
        };
    };
};
type GenericActionDefinition<TEntities extends BaseEntities, TAction extends BaseActions[string] = BaseActions[string]> = {
    title?: string;
    description?: string;
    billable?: boolean;
    cacheable?: boolean;
    input: {
        schema: GenericZuiSchema<EntityReferences<TEntities>, TAction>;
    };
    output: {
        schema: GenericZuiSchema<EntityReferences<TEntities>, ZuiObjectSchema>;
    };
    attributes?: Record<string, string>;
};
export type InterfaceDefinitionProps<TName extends string = string, TVersion extends string = string, TEntities extends BaseEntities = BaseEntities, TActions extends BaseActions = BaseActions, TEvents extends BaseEntities = BaseEntities, TChannels extends BaseChannels = BaseChannels> = {
    name: TName;
    version: TVersion;
    title?: string;
    description?: string;
    icon?: string;
    readme?: string;
    attributes?: Record<string, string>;
    entities?: {
        [K in keyof TEntities]: EntityDefinition<TEntities[K]>;
    };
    events?: {
        [K in keyof TEvents]: GenericEventDefinition<TEntities, TEvents[K]>;
    };
    actions?: {
        [K in keyof TActions]: GenericActionDefinition<TEntities, TActions[K]>;
    };
    channels?: {
        [K in keyof TChannels]: GenericChannelDefinition<TEntities, TChannels[K]>;
    };
    __advanced?: {
        useLegacyZuiTransformer?: boolean;
    };
};
export declare class InterfaceDefinition<TName extends string = string, TVersion extends string = string, TEntities extends BaseEntities = BaseEntities, TActions extends BaseActions = BaseActions, TEvents extends BaseEvents = BaseEvents, TChannels extends BaseChannels = BaseChannels> {
    readonly props: InterfaceDefinitionProps<TName, TVersion, TEntities, TActions, TEvents, TChannels>;
    readonly name: this['props']['name'];
    readonly version: this['props']['version'];
    readonly title: this['props']['title'];
    readonly description: this['props']['description'];
    readonly icon: this['props']['icon'];
    readonly readme: this['props']['readme'];
    readonly attributes: this['props']['attributes'];
    readonly entities: {
        [K in keyof TEntities]: EntityDefinition<TEntities[K]>;
    };
    readonly events: {
        [K in keyof TEvents]: EventDefinition<TEvents[K]>;
    };
    readonly actions: {
        [K in keyof TActions]: ActionDefinition<TActions[K]>;
    };
    readonly channels: {
        [K in keyof TChannels]: ChannelDefinition<TChannels[K]>;
    };
    readonly __advanced: this['props']['__advanced'];
    constructor(props: InterfaceDefinitionProps<TName, TVersion, TEntities, TActions, TEvents, TChannels>);
    private _getEntityReference;
}
export {};
